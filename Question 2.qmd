# Question 2 (Hyper-Parameter Tuning)

```{r}
library(cluster)
library(NbClust)
library(fpc)
```

## a) Average Silhouette Plots

```{r}
library(foreach)
library(doParallel)
library(cluster)

set.seed(123)

# Set up parallel backend
n_cores <- parallel::detectCores() - 1 
cl <- makeCluster(n_cores)
registerDoParallel(cl)

k_max <- 20
silhouette_scores_mean <- numeric(k_max)

# Parallel loop
silhouette_scores_mean[2:k_max] <- foreach(
  i = 2:k_max, 
  .combine = "c", 
  .packages = c("cluster")
) %dopar% {
  km_result <- kmeans(data2, centers = i, nstart = 1000) 
  ss <- silhouette(km_result$cluster, dist(data2))
  mean(ss[, 3])  
}

# Stop parallel cluster
stopCluster(cl)

# Plot the average silhouette width
df1 <- data.frame (x = 2:k_max, y = silhouette_scores_mean[2:20])
sp1 <- ggplot(df1, aes(x=x, y=y)) +
  geom_point(color = "red", shape = 19, size = 3) +  
  geom_line(color = "black", linewidth = 1) +        
  geom_vline(xintercept = which.max(silhouette_scores), 
             color = "blue", linetype = "dashed", linewidth = 1) +
  labs(title = "Average Silhouette Scores for K-Means Clustering",
       x = "Number of Clusters (k)",
       y = "Average Silhouette Width") +
  scale_x_continuous(breaks = 2:k_max) +            
  theme_minimal() +
  theme(
    plot.title = element_text(size = 17.5, face = "bold"),  
    axis.title.x = element_text(size = 14),               
    axis.title.y = element_text(size = 14),               
    axis.text = element_text(size = 10),                  
    plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"),     
    panel.grid.minor = element_blank()                    
  )
sp1

# ggsave(sp1, filename = "Plots/Question 2a Average Silhouette Scores for K-Means Clustering.png")
# save(silhouette_scores_mean, file = "R Data/Silhouette Scores K-Means.RData" )
```

```{r}
library(foreach)
library(doParallel)
library(cluster)  

set.seed(123)

# Parallel Set-Up
n_cores <- parallel::detectCores() - 1  
cl <- makeCluster(n_cores)
registerDoParallel(cl)

pam_max <- 20
silhouette_scores_medoid <- numeric(pam_max)

# Parallel loop 
silhouette_scores_medoid[2:pam_max] <- foreach(
  i = 2:pam_max, 
  .combine = "c", 
  .packages = c("cluster")
) %dopar% {
  pam_result <- pam(data2, k = i)  
  ss <- silhouette(pam_result$clustering, dist(data2))
  mean(ss[, 3])  
}

# Stop parallel cluster
stopCluster(cl)

df2 <- data.frame (x = 2:pam_max, y = silhouette_scores_medoid[2:20])
sp2 <- ggplot(df2, aes(x=x, y=y)) +
  geom_point(color = "green", shape = 19, size = 3) +  
  geom_line(color = "black", linewidth = 1) +        
  geom_vline(xintercept = which.max(silhouette_scores), 
             color = "blue", linetype = "dashed", linewidth = 1) +
  labs(title = "Average Silhouette Scores for K-Mediods Clustering",
       x = "Number of Clusters (k)",
       y = "Average Silhouette Width") +
  scale_x_continuous(breaks = 2:k_max) +            
  theme_minimal() +
  theme(
    plot.title = element_text(size = 17.5, face = "bold"),  
    axis.title.x = element_text(size = 14),               
    axis.title.y = element_text(size = 14),               
    axis.text = element_text(size = 10),         
    plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"),     
    panel.grid.minor = element_blank()                    
  )
sp2

# ggsave(sp2, filename = "Plots/Question 2a Average Silhouette Scores for K-Mediods Clustering.png")
# save(silhouette_scores_medoid, file = "R Data/Silhouette Scores K-Medoids.RData" )
```

## b) 

```{r}

```

## d)

```{r}
#| warning: false
# Compute gap statistic
gap_stat <- clusGap(data2, FUN = kmeans, nstart = 25, K.max = 20, B = 10)
# Print the result
plot(gap_stat, frame = FALSE, xlab = "Number of clusters k")
```
