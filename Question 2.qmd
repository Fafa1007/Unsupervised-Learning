# Question 2 (Hyper-Parameter Tuning)

```{r}
library(cluster)
library(NbClust)
library(fpc)
```

## a) Average Silhouette Plots

```{r}
library(foreach)
library(doParallel)
library(cluster)

set.seed(123)

# Set up parallel backend
n_cores <- parallel::detectCores() - 1 
cl <- makeCluster(n_cores)
registerDoParallel(cl)

k_max <- 20
silhouette_scores_mean <- numeric(k_max)

# Parallel loop
silhouette_scores_mean[2:k_max] <- foreach(
  i = 2:k_max, 
  .combine = "c", 
  .packages = c("cluster")
) %dopar% {
  km_result <- kmeans(data2, centers = i, nstart = 1000) 
  ss <- silhouette(km_result$cluster, dist(data2))
  mean(ss[, 3])  
}

# Stop parallel cluster
stopCluster(cl)

# Plot the average silhouette width
df1 <- data.frame (x = 2:k_max, y = silhouette_scores_mean[2:20])
sp1 <- ggplot(df1, aes(x=x, y=y)) +
  geom_point(color = "red", shape = 19, size = 3) +  
  geom_line(color = "black", linewidth = 1) +        
  geom_vline(xintercept = which.max(silhouette_scores), 
             color = "blue", linetype = "dashed", linewidth = 1) +
  labs(title = "Average Silhouette Scores for K-Means Clustering",
       x = "Number of Clusters (k)",
       y = "Average Silhouette Width") +
  scale_x_continuous(breaks = 2:k_max) +            
  theme_minimal() +
  theme(
    plot.title = element_text(size = 17.5, face = "bold"),  
    axis.title.x = element_text(size = 14),               
    axis.title.y = element_text(size = 14),               
    axis.text = element_text(size = 10),                  
    plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"),     
    panel.grid.minor = element_blank()                    
  )
sp1

# ggsave(sp1, filename = "Plots/Question 2a Average Silhouette Scores for K-Means Clustering.png")
# save(silhouette_scores_mean, file = "R Data/Silhouette Scores K-Means.RData" )
```

```{r}
library(foreach)
library(doParallel)
library(cluster)  

set.seed(123)

# Parallel Set-Up
n_cores <- parallel::detectCores() - 1  
cl <- makeCluster(n_cores)
registerDoParallel(cl)

pam_max <- 20
silhouette_scores_medoid <- numeric(pam_max)

# Parallel loop 
silhouette_scores_medoid[2:pam_max] <- foreach(
  i = 2:pam_max, 
  .combine = "c", 
  .packages = c("cluster")
) %dopar% {
  pam_result <- pam(data2, k = i)  
  ss <- silhouette(pam_result$clustering, dist(data2))
  mean(ss[, 3])  
}

# Stop parallel cluster
stopCluster(cl)

df2 <- data.frame (x = 2:pam_max, y = silhouette_scores_medoid[2:20])
sp2 <- ggplot(df2, aes(x=x, y=y)) +
  geom_point(color = "green", shape = 19, size = 3) +  
  geom_line(color = "black", linewidth = 1) +        
  geom_vline(xintercept = which.max(silhouette_scores), 
             color = "blue", linetype = "dashed", linewidth = 1) +
  labs(title = "Average Silhouette Scores for K-Mediods Clustering",
       x = "Number of Clusters (k)",
       y = "Average Silhouette Width") +
  scale_x_continuous(breaks = 2:k_max) +            
  theme_minimal() +
  theme(
    plot.title = element_text(size = 17.5, face = "bold"),  
    axis.title.x = element_text(size = 14),               
    axis.title.y = element_text(size = 14),               
    axis.text = element_text(size = 10),         
    plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"),     
    panel.grid.minor = element_blank()                    
  )
sp2

# ggsave(sp2, filename = "Plots/Question 2a Average Silhouette Scores for K-Mediods Clustering.png")
# save(silhouette_scores_medoid, file = "R Data/Silhouette Scores K-Medoids.RData" )
```

## b) 

```{r}
sensitivity_func1 <- function(max_iter, no_kmeans){
  sensitivity_results <- c()
  no_iter <- 1
  while(no_iter < max_iter){
    km_result <- kmeans(data2, centers = no_kmeans, nstart = 10) 
    ss <- silhouette(km_result$cluster, dist(data2))
    sensitivity_results[no_iter] <- mean(ss[, 3]) 
    no_iter <- no_iter +1
  }
  return(sensitivity_results)
}

sensitivity_func2 <- function(max_iter, no_kmediods){
  sensitivity_results <- c()
  no_iter <- 1
  while(no_iter < max_iter){
    pam_result <- pam(data2, k = no_kmediods) 
    ss <- silhouette(pam_result$cluster, dist(data2))
    sensitivity_results[no_iter] <- mean(ss[, 3])  
    no_iter <- no_iter +1
  }
  return(sensitivity_results)
}

sensitivity_plot_func <- function(sensitivity_results, plot_title, plot_no){
  df <- data.frame(x =1:length(sensitivity_results), y = sensitivity_results)
  sp <- ggplot(data = df, aes(x=x, y=y)) +
    geom_point(color = "red", size = 1.5, shape = 19)+
    geom_line(color = "black", linewidth = 0.5) +
    labs(
      title = paste0("Sensitivity Analysis of ", plot_title), 
      xlab = "Number of Clusters",
      ylab = "Average Silhouette Score"
    ) +
    theme_minimal()+
    theme(
      plot.title = element_text(size = 17.5, face = "bold"),  
      axis.title.x = element_text(size = 14),               
      axis.title.y = element_text(size = 14),               
      axis.text = element_text(size = 10),         
      plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"),     
      panel.grid.minor = element_blank()                    
    )
  
  ggsave(sp, filename = paste0("Plots/Question 2b Sensitivity Plot ", plot_no, ".png"))
  return(sp)
}
```

```{r}
kmeans_sens1 <- sensitivity_func1(20, 15)
sensitivity_plot_func(kmeans_sens1, plot_title = "K-Means (k=15)", 1)

kmeans_sens2 <- sensitivity_func1(20, 16)
sensitivity_plot_func(kmeans_sens2, plot_title = "K-Means (k=16)", 2)

kmediod_sens1 <- sensitivity_func2(20, 15)
sensitivity_plot_func(kmediod_sens1, plot_title = "K-Mediods (k=15)", 1)

kmediod_sens2 <- sensitivity_plot_func(20, 16)
sensitivity_plot_func(kmediod_sens2, plot_title = "K-Mediods (k=16)", 2)
```

## d)

```{r}
#| warning: false

gap_plot <- function(results, plot_no){
  gp <- ggplot(data = results, aes(x=1:20, y=gap)) +
  geom_point(color = "red", size = 1.5, shape = 19)+
  geom_line(color = "black", linewidth = 0.5) +
  geom_errorbar(aes(ymin = gap - SE.sim, 
                 ymax = gap + SE.sim), 
              width = 0.2, color = "darkred") +
  labs(
    title = "Gap Statistic calculated every number of category", 
    xlab = "Number of Clusters",
    ylab = "Gap Statistic"
  ) +
  theme_minimal()+
  theme(
    plot.title = element_text(size = 17.5, face = "bold"),  
    axis.title.x = element_text(size = 14),               
    axis.title.y = element_text(size = 14),               
    axis.text = element_text(size = 10),         
    plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"),     
    panel.grid.minor = element_blank()                    
  )
  
  ggsave(gp, filename = paste0("Plots/Question 2d Gap Plot ", plot_no, ".png"))
  return(gp)  
}


# Finding Best K
Best_k_func <- function(results){
  Best_k <- c()
  Best_gap <- c()
  index <- 1
  for(i in 1:(nrow(results)-1)){
    if(results[i,3] >= (results[i+1,3] - results[i+1, 4])){
      Best_k[index] <- i
      Best_gap[index] <- results[i,3]
    }
  }
  return(Best_k[which.min(Best_gap)])
}
```

```{r}
gap_stat <- clusGap(data2, FUN = kmeans, nstart = 25, K.max = 20, B = 10)
results <- data.frame(gap_stat$Tab)
gap_plot(results, 1)
Best_k_func(results)


gap_stat <- clusGap(data2, FUN = pam, K.max = 20)
results <- data.frame(gap_stat$Tab)
gap_plot(results, 2)
Best_k_func(results)
```
