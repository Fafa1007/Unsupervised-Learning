# Question 2 (Hyper-Parameter Tuning)

```{r}
library(cluster)
library(NbClust)
library(fpc)
```

## a) Average Silhouette Plots

```{r}
library(foreach)
library(doParallel)
library(cluster)

set.seed(123)

# Set up parallel backend
n_cores <- parallel::detectCores() - 1 
cl <- makeCluster(n_cores)
registerDoParallel(cl)

k_max <- 20
silhouette_scores_mean <- numeric(k_max)

# Parallel loop
silhouette_scores_mean[2:k_max] <- foreach(
  i = 2:k_max, 
  .combine = "c", 
  .packages = c("cluster")
) %dopar% {
  km_result <- kmeans(data1, centers = i, nstart = 1000) 
  ss <- silhouette(km_result$cluster, dist(data1))
  mean(ss[, 3])  
}

# Stop parallel cluster
stopCluster(cl)

# Plot the average silhouette width
df1 <- data.frame (x = 2:k_max, y = silhouette_scores_mean[2:20])
sp1 <- ggplot(df1, aes(x=x, y=y)) +
  geom_point(color = "red", shape = 19, size = 3) +  
  geom_line(color = "black", linewidth = 1) +        
  geom_vline(xintercept = which.max(silhouette_scores_mean), 
             color = "blue", linetype = "dashed", linewidth = 1) +
  labs(title = "Average Silhouette Scores for K-Means Clustering",
       x = "Number of Clusters (k)",
       y = "Average Silhouette Width") +
  scale_x_continuous(breaks = 2:k_max) +            
  theme_minimal() +
  theme(
    plot.title = element_text(size = 17.5, face = "bold"),  
    axis.title.x = element_text(size = 14),               
    axis.title.y = element_text(size = 14),               
    axis.text = element_text(size = 10),                  
    plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"),     
    panel.grid.minor = element_blank()                    
  )
sp1

# ggsave(sp1, filename = "Plots/Question 2a Average Silhouette Scores for K-Means Clustering.png")
# save(silhouette_scores_mean, file = "R Data/Silhouette Scores K-Means.RData" )
```

```{r}
library(foreach)
library(doParallel)
library(cluster)  

set.seed(123)

# Parallel Set-Up
n_cores <- parallel::detectCores() - 1  
cl <- makeCluster(n_cores)
registerDoParallel(cl)

pam_max <- 20
silhouette_scores_medoid <- numeric(pam_max)

# Parallel loop 
silhouette_scores_medoid[2:pam_max] <- foreach(
  i = 2:pam_max, 
  .combine = "c", 
  .packages = c("cluster")
) %dopar% {
  pam_result <- pam(data1, k = i, variant ="f_5", nstart = 10)  
  ss <- silhouette(pam_result$clustering, dist(data1))
  mean(ss[, 3])  
}

# Stop parallel cluster
stopCluster(cl)

df2 <- data.frame (x = 2:pam_max, y = silhouette_scores_medoid[2:20])
sp2 <- ggplot(df2, aes(x=x, y=y)) +
  geom_point(color = "green", shape = 19, size = 3) +  
  geom_line(color = "black", linewidth = 1) +        
  geom_vline(xintercept = which.max(silhouette_scores_medoid), 
             color = "blue", linetype = "dashed", linewidth = 1) +
  labs(title = "Average Silhouette Scores for K-Mediods Clustering",
       x = "Number of Clusters (k)",
       y = "Average Silhouette Width") +
  scale_x_continuous(breaks = 2:k_max) +            
  theme_minimal() +
  theme(
    plot.title = element_text(size = 17.5, face = "bold"),  
    axis.title.x = element_text(size = 14),               
    axis.title.y = element_text(size = 14),               
    axis.text = element_text(size = 10),         
    plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"),     
    panel.grid.minor = element_blank()                    
  )
sp2

# ggsave(sp2, filename = "Plots/Question 2a Average Silhouette Scores for K-Mediods Clustering.png")
# save(silhouette_scores_medoid, file = "R Data/Silhouette Scores K-Medoids.RData" )
```

## b)

```{r}
sens_func <- function(Kmeans, Kmedoids, max_iter, k, plot_title, data){
  sensitivity_results <- c()
  no_iter <- 0
  if(Kmeans == TRUE){
    while(no_iter < max_iter+1){
      km_result <- kmeans(data, centers = k, nstart = 10) 
      ss <- silhouette(km_result$cluster, dist(data))
      sensitivity_results[no_iter] <- mean(ss[, 3])
      no_iter <- no_iter +1
    }
  }
  
  if(Kmedoids == TRUE){
    while(no_iter < max_iter+1){
    pam_result <- pam(data, k = k, variant = "f_5") 
    ss <- silhouette(pam_result$cluster, dist(data))
    sensitivity_results[no_iter] <- mean(ss[, 3])  
    no_iter <- no_iter +1
    }
  }
  sensitivity_results <- scale(sensitivity_results)
  sensitivity_results[is.nan(sensitivity_results)] <- 0
  
  df <- data.frame(x=1:max_iter, y = sensitivity_results, group = plot_title)
  return(df)
}
  

sensitivity_plot_func <- function(sensitivity_results){
  sp <- ggplot(sensitivity_results, aes(x=x, y=y, color = group)) +
    geom_point( size = 1.5, shape = 19)+
    geom_line( linewidth = 0.5) +
    labs(
      title = paste0("Scaled Average Silhouette Scores To\nVisualize Sensitivity"), 
      x = "Iteration Number x",
      y = "Scaled Average Silhouette Score"
    ) +
    theme_minimal()+
    theme(
      plot.title = element_text(size = 17, face = "bold"),  
      axis.title.x = element_text(size = 14),               
      axis.title.y = element_text(size = 14),               
      axis.text = element_text(size = 10),         
      plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"),     
      panel.grid.minor = element_blank()                    
    )
  
  #ggsave(sp, filename = paste0("Plots/Question 2b Sensitivity Plot.png"))
  return(sp)
}

summary_silhouette_stats <- function(df, group_col = "group", score_col = "y") {
  df %>%
    group_by(across(all_of(group_col))) %>%
    summarise(
      mean = mean(.data[[score_col]]),
      sd = sd(.data[[score_col]]),
      range = diff(range(.data[[score_col]])),
      cv = ifelse(mean != 0, sd / mean, NA),
      .groups = "drop"
    ) %>%
    pivot_longer(cols = -all_of(group_col), names_to = "statistic", values_to = "value") %>%
    pivot_wider(names_from = all_of(group_col), values_from = value) %>%
    as.data.frame()
}
```

```{r}
library(knitr)
library(dplyr)
library(tidyr)
kmeans_sens1 <- sens_func(Kmeans = TRUE, Kmedoids = FALSE, 20, 15, "K-Means K=15", data1)
kmeans_sens2 <- sens_func(Kmeans = TRUE, Kmedoids = FALSE, 20, 16,"K-Means K=16", data1)
kmedoid_sens1 <- sens_func(Kmeans = FALSE, Kmedoids = TRUE, 20, 15,"K-Mediods K=15", data1)
kmedoid_sens2 <- sens_func(Kmeans = FALSE, Kmedoids = TRUE, 20, 16, "K-Mediods K=16", data1)

kmedoid_sens1$y <- kmedoid_sens1$y+0.05
sens_results <- rbind(kmeans_sens1,kmeans_sens2, kmedoid_sens1, kmedoid_sens2)
# save(sens_results, file = "R Data/Sensitivity Average Scaled Silhoutte Scores.RData" )

sensitivity_plot_func(sens_results)
summary_silhouette_stats(sens_results, group_col = "group", score_col= "y")
```

## d)

```{r}
#| warning: false
gap_plot <- function(results, plot_no, plot_title){
  df <- data.frame(x = 1:nrow(results), y = results$gap)
  gp <- ggplot(data = df, aes(x=x, y=y)) +
  geom_point(color = "red", size = 1.5, shape = 19)+
  geom_line(color = "black", linewidth = 0.5) +
  geom_errorbar(aes(ymin = results$gap - results$SE.sim, 
                 ymax = results$gap + results$SE.sim), 
              width = 0.2, color = "darkred") +
  labs(
    title = paste0("Gap Statistic for ", plot_title), 
    x = "Number of Clusters",
    y = "Gap Statistic"
  ) +
  theme_minimal()+
  theme(
    plot.title = element_text(size = 17.5, face = "bold"),  
    axis.title.x = element_text(size = 14),               
    axis.title.y = element_text(size = 14),               
    axis.text = element_text(size = 10),         
    plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"),     
    panel.grid.minor = element_blank()                    
  )
  
  # ggsave(gp, filename = paste0("Plots/Question 2d Gap Plot ", plot_no, ".png"))
  return(gp)  
}
```

```{r}
gap_stat <- clusGap(data1, FUN = kmeans, nstart = 10, K.max = 20, B = 10)
results1 <- data.frame(gap_stat$Tab)
gap_plot(results1, 1, "K-Means")


gap_stat_pam <- clusGap(data, FUN = pam, K.max = 20, B = 1, variant= "f_5")
results2 <- data.frame(gap_stat_pam$Tab)
gap_plot(results2, 2, "K-Medoids")
# save(gap_stat_pam, file = "R Data/Gap Statistics for K-mediods.RData" )
```
